// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
   email,
   password,
   address,
   city,
   state,
   country,
   zip_code,
   phone_number
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, username, email, password, address, city, state, country, zip_code, phone_number, created_at
`

type CreateUserParams struct {
	Username    string `json:"username"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	Address     string `json:"address"`
	City        string `json:"city"`
	State       string `json:"state"`
	Country     string `json:"country"`
	ZipCode     int64  `json:"zip_code"`
	PhoneNumber int64  `json:"phone_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Address,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.PhoneNumber,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUsers, id)
	return err
}

const getUsers = `-- name: GetUsers :one
SELECT id, username, email, password, address, city, state, country, zip_code, phone_number, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUsers(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsers, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.PhoneNumber,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersByID = `-- name: GetUsersByID :one
SELECT id, username, email, password, address, city, state, country, zip_code, phone_number, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUsersByID(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsersByID, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.PhoneNumber,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, address, city, "state", country, zip_code, phone_number, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUsersRow struct {
	ID          int64     `json:"id"`
	Username    string    `json:"username"`
	Email       string    `json:"email"`
	Address     string    `json:"address"`
	City        string    `json:"city"`
	State       string    `json:"state"`
	Country     string    `json:"country"`
	ZipCode     int64     `json:"zip_code"`
	PhoneNumber int64     `json:"phone_number"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Address,
			&i.City,
			&i.State,
			&i.Country,
			&i.ZipCode,
			&i.PhoneNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET username = $2
WHERE id = $1
RETURNING id, username, email, password, address, city, state, country, zip_code, phone_number, created_at
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
		&i.PhoneNumber,
		&i.CreatedAt,
	)
	return i, err
}
