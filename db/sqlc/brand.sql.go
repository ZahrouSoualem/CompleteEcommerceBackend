// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: brand.sql

package db

import (
	"context"
)

const createBrand = `-- name: CreateBrand :one
INSERT INTO brand (
  braname,
  imageurl
) VALUES (
  $1, $2
)
RETURNING id, braname, imageurl
`

type CreateBrandParams struct {
	Braname  string `json:"braname"`
	Imageurl string `json:"imageurl"`
}

func (q *Queries) CreateBrand(ctx context.Context, arg CreateBrandParams) (Brand, error) {
	row := q.db.QueryRowContext(ctx, createBrand, arg.Braname, arg.Imageurl)
	var i Brand
	err := row.Scan(&i.ID, &i.Braname, &i.Imageurl)
	return i, err
}

const deleteBrand = `-- name: DeleteBrand :exec
DELETE FROM brand
WHERE id = $1
`

func (q *Queries) DeleteBrand(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBrand, id)
	return err
}

const getBrand = `-- name: GetBrand :one
SELECT id, braname, imageurl FROM brand
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBrand(ctx context.Context, id int64) (Brand, error) {
	row := q.db.QueryRowContext(ctx, getBrand, id)
	var i Brand
	err := row.Scan(&i.ID, &i.Braname, &i.Imageurl)
	return i, err
}

const listBrands = `-- name: ListBrands :many
SELECT id, braname, imageurl FROM brand
ORDER BY braname
LIMIT $1
OFFSET $2
`

type ListBrandsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBrands(ctx context.Context, arg ListBrandsParams) ([]Brand, error) {
	rows, err := q.db.QueryContext(ctx, listBrands, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Brand
	for rows.Next() {
		var i Brand
		if err := rows.Scan(&i.ID, &i.Braname, &i.Imageurl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrand = `-- name: UpdateBrand :one
UPDATE brand SET BraName = $2
WHERE id = $1 
RETURNING id, braname, imageurl
`

type UpdateBrandParams struct {
	ID      int64  `json:"id"`
	Braname string `json:"braname"`
}

func (q *Queries) UpdateBrand(ctx context.Context, arg UpdateBrandParams) (Brand, error) {
	row := q.db.QueryRowContext(ctx, updateBrand, arg.ID, arg.Braname)
	var i Brand
	err := row.Scan(&i.ID, &i.Braname, &i.Imageurl)
	return i, err
}
