// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: category.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (
  catname
) VALUES (
  $1
)
RETURNING id, catname
`

func (q *Queries) CreateCategory(ctx context.Context, catname string) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, catname)
	var i Category
	err := row.Scan(&i.ID, &i.Catname)
	return i, err
}

const deleteCategories = `-- name: DeleteCategories :exec
DELETE FROM category
WHERE id = $1
`

func (q *Queries) DeleteCategories(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCategories, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, catname FROM category
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Catname)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, catname FROM category
ORDER BY CatName
LIMIT $1
OFFSET $2
`

type ListCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Catname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category SET CatName = $2
WHERE id = $1 
RETURNING id, catname
`

type UpdateCategoryParams struct {
	ID      int64  `json:"id"`
	Catname string `json:"catname"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, arg.ID, arg.Catname)
	var i Category
	err := row.Scan(&i.ID, &i.Catname)
	return i, err
}
