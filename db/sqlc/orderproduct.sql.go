// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: orderproduct.sql

package db

import (
	"context"
	"database/sql"
)

const createordersproduct = `-- name: Createordersproduct :one
INSERT INTO ordersproduct (
  orders_id,
  product_id,
  quantity
) VALUES (
  $1, $2, $3
)
RETURNING orders_product_id, orders_id, product_id, quantity
`

type CreateordersproductParams struct {
	OrdersID  int64         `json:"orders_id"`
	ProductID int64         `json:"product_id"`
	Quantity  sql.NullInt64 `json:"quantity"`
}

func (q *Queries) Createordersproduct(ctx context.Context, arg CreateordersproductParams) (Ordersproduct, error) {
	row := q.db.QueryRowContext(ctx, createordersproduct, arg.OrdersID, arg.ProductID, arg.Quantity)
	var i Ordersproduct
	err := row.Scan(
		&i.OrdersProductID,
		&i.OrdersID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const deleteordersproduct = `-- name: Deleteordersproduct :exec
DELETE FROM ordersproduct
WHERE orders_product_id = $1
`

func (q *Queries) Deleteordersproduct(ctx context.Context, ordersProductID int64) error {
	_, err := q.db.ExecContext(ctx, deleteordersproduct, ordersProductID)
	return err
}

const getordersproduct = `-- name: Getordersproduct :one
SELECT orders_product_id, orders_id, product_id, quantity FROM ordersproduct
WHERE orders_product_id = $1 LIMIT 1
`

func (q *Queries) Getordersproduct(ctx context.Context, ordersProductID int64) (Ordersproduct, error) {
	row := q.db.QueryRowContext(ctx, getordersproduct, ordersProductID)
	var i Ordersproduct
	err := row.Scan(
		&i.OrdersProductID,
		&i.OrdersID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const listordersproducts = `-- name: Listordersproducts :many
SELECT product_id, COUNT(product_id) ,SUM(quantity) as total FROM ordersproduct
GROUP BY product_id
ORDER BY total
LIMIT $1
OFFSET $2
`

type ListordersproductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListordersproductsRow struct {
	ProductID int64 `json:"product_id"`
	Count     int64 `json:"count"`
	Total     int64 `json:"total"`
}

func (q *Queries) Listordersproducts(ctx context.Context, arg ListordersproductsParams) ([]ListordersproductsRow, error) {
	rows, err := q.db.QueryContext(ctx, listordersproducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListordersproductsRow
	for rows.Next() {
		var i ListordersproductsRow
		if err := rows.Scan(&i.ProductID, &i.Count, &i.Total); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
