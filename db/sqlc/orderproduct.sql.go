// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: orderproduct.sql

package db

import (
	"context"
	"time"
)

const createordersproduct = `-- name: Createordersproduct :one
INSERT INTO ordersproduct (
  orders_id,
  product_id,
  quantity
) VALUES (
  $1, $2, $3
)
RETURNING orders_product_id, orders_id, product_id, quantity
`

type CreateordersproductParams struct {
	OrdersID  int64 `json:"orders_id"`
	ProductID int64 `json:"product_id"`
	Quantity  int64 `json:"quantity"`
}

func (q *Queries) Createordersproduct(ctx context.Context, arg CreateordersproductParams) (Ordersproduct, error) {
	row := q.db.QueryRowContext(ctx, createordersproduct, arg.OrdersID, arg.ProductID, arg.Quantity)
	var i Ordersproduct
	err := row.Scan(
		&i.OrdersProductID,
		&i.OrdersID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const deleteordersproduct = `-- name: Deleteordersproduct :exec
DELETE FROM ordersproduct
WHERE orders_product_id = $1
`

func (q *Queries) Deleteordersproduct(ctx context.Context, ordersProductID int64) error {
	_, err := q.db.ExecContext(ctx, deleteordersproduct, ordersProductID)
	return err
}

const getordersproduct = `-- name: Getordersproduct :one
SELECT orders_product_id, orders_id, product_id, quantity FROM ordersproduct
WHERE orders_product_id = $1 LIMIT 1
`

func (q *Queries) Getordersproduct(ctx context.Context, ordersProductID int64) (Ordersproduct, error) {
	row := q.db.QueryRowContext(ctx, getordersproduct, ordersProductID)
	var i Ordersproduct
	err := row.Scan(
		&i.OrdersProductID,
		&i.OrdersID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const listJoinOrderProducts = `-- name: ListJoinOrderProducts :many
SELECT
    orders.id as orderid,
    users.id as userid,
    users.username,
    users.email,
    users.phone_number,
    orders.created_at
FROM
     orders 
    JOIN users ON orders.user_id = users.id
`

type ListJoinOrderProductsRow struct {
	Orderid     int64     `json:"orderid"`
	Userid      int64     `json:"userid"`
	Username    string    `json:"username"`
	Email       string    `json:"email"`
	PhoneNumber int64     `json:"phone_number"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) ListJoinOrderProducts(ctx context.Context) ([]ListJoinOrderProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, listJoinOrderProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListJoinOrderProductsRow{}
	for rows.Next() {
		var i ListJoinOrderProductsRow
		if err := rows.Scan(
			&i.Orderid,
			&i.Userid,
			&i.Username,
			&i.Email,
			&i.PhoneNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderByUserID = `-- name: ListOrderByUserID :many
SELECT
    orders.id as orderid,
    users.id as userid,
    users.username,
    users.email,
    users.phone_number,
    orders.created_at
FROM
     orders 
    JOIN users ON orders.user_id = users.id
    where users.id= $1
`

type ListOrderByUserIDRow struct {
	Orderid     int64     `json:"orderid"`
	Userid      int64     `json:"userid"`
	Username    string    `json:"username"`
	Email       string    `json:"email"`
	PhoneNumber int64     `json:"phone_number"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) ListOrderByUserID(ctx context.Context, id int64) ([]ListOrderByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrderByUserID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOrderByUserIDRow{}
	for rows.Next() {
		var i ListOrderByUserIDRow
		if err := rows.Scan(
			&i.Orderid,
			&i.Userid,
			&i.Username,
			&i.Email,
			&i.PhoneNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listordersproducts = `-- name: Listordersproducts :many
SELECT product_id, COUNT(product_id) ,SUM(quantity) as total FROM ordersproduct
WHERE orders_id = $1
GROUP BY product_id
ORDER BY total
LIMIT $2
OFFSET $3
`

type ListordersproductsParams struct {
	OrdersID int64 `json:"orders_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

type ListordersproductsRow struct {
	ProductID int64 `json:"product_id"`
	Count     int64 `json:"count"`
	Total     int64 `json:"total"`
}

func (q *Queries) Listordersproducts(ctx context.Context, arg ListordersproductsParams) ([]ListordersproductsRow, error) {
	rows, err := q.db.QueryContext(ctx, listordersproducts, arg.OrdersID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListordersproductsRow{}
	for rows.Next() {
		var i ListordersproductsRow
		if err := rows.Scan(&i.ProductID, &i.Count, &i.Total); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const productByOrderID = `-- name: ProductByOrderID :many
SELECT
    orders_product_id,
    orders_id,
    ordersproduct.quantity,
    product_id,
    products.proname,
    products.price
from
    ordersproduct
    join products on ordersproduct.product_id = products.id
where
    ordersproduct.orders_id = $1
`

type ProductByOrderIDRow struct {
	OrdersProductID int64   `json:"orders_product_id"`
	OrdersID        int64   `json:"orders_id"`
	Quantity        int64   `json:"quantity"`
	ProductID       int64   `json:"product_id"`
	Proname         string  `json:"proname"`
	Price           float64 `json:"price"`
}

func (q *Queries) ProductByOrderID(ctx context.Context, ordersID int64) ([]ProductByOrderIDRow, error) {
	rows, err := q.db.QueryContext(ctx, productByOrderID, ordersID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductByOrderIDRow{}
	for rows.Next() {
		var i ProductByOrderIDRow
		if err := rows.Scan(
			&i.OrdersProductID,
			&i.OrdersID,
			&i.Quantity,
			&i.ProductID,
			&i.Proname,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
