// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: orderproduct.sql

package db

import (
	"context"
	"database/sql"
)

const createOrderProduct = `-- name: CreateOrderProduct :one
INSERT INTO OrderProduct (
  order_id,
  product_id,
  quantity
) VALUES (
  $1, $2, $3
)
RETURNING order_product_id, order_id, product_id, quantity
`

type CreateOrderProductParams struct {
	OrderID   int64         `json:"order_id"`
	ProductID int64         `json:"product_id"`
	Quantity  sql.NullInt64 `json:"quantity"`
}

func (q *Queries) CreateOrderProduct(ctx context.Context, arg CreateOrderProductParams) (Orderproduct, error) {
	row := q.db.QueryRowContext(ctx, createOrderProduct, arg.OrderID, arg.ProductID, arg.Quantity)
	var i Orderproduct
	err := row.Scan(
		&i.OrderProductID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const deleteOrderProduct = `-- name: DeleteOrderProduct :exec
DELETE FROM OrderProduct
WHERE order_product_id = $1
`

func (q *Queries) DeleteOrderProduct(ctx context.Context, orderProductID int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderProduct, orderProductID)
	return err
}

const getOrderProduct = `-- name: GetOrderProduct :one
SELECT order_product_id, order_id, product_id, quantity FROM OrderProduct
WHERE order_product_id = $1 LIMIT 1
`

func (q *Queries) GetOrderProduct(ctx context.Context, orderProductID int64) (Orderproduct, error) {
	row := q.db.QueryRowContext(ctx, getOrderProduct, orderProductID)
	var i Orderproduct
	err := row.Scan(
		&i.OrderProductID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const listOrderProducts = `-- name: ListOrderProducts :many
SELECT product_id, COUNT(product_id) ,SUM(quantity) as total FROM OrderProduct
GROUP BY product_id
ORDER BY total
LIMIT $1
OFFSET $2
`

type ListOrderProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListOrderProductsRow struct {
	ProductID int64 `json:"product_id"`
	Count     int64 `json:"count"`
	Total     int64 `json:"total"`
}

func (q *Queries) ListOrderProducts(ctx context.Context, arg ListOrderProductsParams) ([]ListOrderProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrderProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOrderProductsRow
	for rows.Next() {
		var i ListOrderProductsRow
		if err := rows.Scan(&i.ProductID, &i.Count, &i.Total); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
