// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: orderproduct.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createordersproduct = `-- name: Createordersproduct :one
INSERT INTO ordersproduct (
  orders_id,
  product_id,
  quantity
) VALUES (
  $1, $2, $3
)
RETURNING orders_product_id, orders_id, product_id, quantity
`

type CreateordersproductParams struct {
	OrdersID  int64 `json:"orders_id"`
	ProductID int64 `json:"product_id"`
	Quantity  int64 `json:"quantity"`
}

func (q *Queries) Createordersproduct(ctx context.Context, arg CreateordersproductParams) (Ordersproduct, error) {
	row := q.db.QueryRowContext(ctx, createordersproduct, arg.OrdersID, arg.ProductID, arg.Quantity)
	var i Ordersproduct
	err := row.Scan(
		&i.OrdersProductID,
		&i.OrdersID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const deleteordersproduct = `-- name: Deleteordersproduct :exec
DELETE FROM ordersproduct
WHERE orders_product_id = $1
`

func (q *Queries) Deleteordersproduct(ctx context.Context, ordersProductID int64) error {
	_, err := q.db.ExecContext(ctx, deleteordersproduct, ordersProductID)
	return err
}

const getordersproduct = `-- name: Getordersproduct :one
SELECT orders_product_id, orders_id, product_id, quantity FROM ordersproduct
WHERE orders_product_id = $1 LIMIT 1
`

func (q *Queries) Getordersproduct(ctx context.Context, ordersProductID int64) (Ordersproduct, error) {
	row := q.db.QueryRowContext(ctx, getordersproduct, ordersProductID)
	var i Ordersproduct
	err := row.Scan(
		&i.OrdersProductID,
		&i.OrdersID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const listJoinOrderProducts = `-- name: ListJoinOrderProducts :many
SELECT
  ordersproduct.orders_product_id, ordersproduct.orders_id, ordersproduct.product_id, ordersproduct.quantity,orders.id, orders.user_id, orders.created_at, orders.last_updated,users.id, users.username, users.email, users.password, users.address, users.city, users.state, users.country, users.zip_code, users.phone_number, users.created_at
FROM
    ordersproduct
    JOIN products ON ordersproduct.product_id = products.id
    JOIN orders ON ordersproduct.orders_id = orders.id
    JOIN users ON orders.user_id = users.id
    where orders.user_id= 1
    order by orders.created_at
`

type ListJoinOrderProductsRow struct {
	OrdersProductID int64          `json:"orders_product_id"`
	OrdersID        int64          `json:"orders_id"`
	ProductID       int64          `json:"product_id"`
	Quantity        int64          `json:"quantity"`
	ID              int64          `json:"id"`
	UserID          int64          `json:"user_id"`
	CreatedAt       time.Time      `json:"created_at"`
	LastUpdated     time.Time      `json:"last_updated"`
	ID_2            int64          `json:"id_2"`
	Username        string         `json:"username"`
	Email           string         `json:"email"`
	Password        string         `json:"password"`
	Address         sql.NullString `json:"address"`
	City            sql.NullString `json:"city"`
	State           sql.NullString `json:"state"`
	Country         sql.NullString `json:"country"`
	ZipCode         int64          `json:"zip_code"`
	PhoneNumber     int64          `json:"phone_number"`
	CreatedAt_2     sql.NullTime   `json:"created_at_2"`
}

func (q *Queries) ListJoinOrderProducts(ctx context.Context) ([]ListJoinOrderProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, listJoinOrderProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListJoinOrderProductsRow{}
	for rows.Next() {
		var i ListJoinOrderProductsRow
		if err := rows.Scan(
			&i.OrdersProductID,
			&i.OrdersID,
			&i.ProductID,
			&i.Quantity,
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.ID_2,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Address,
			&i.City,
			&i.State,
			&i.Country,
			&i.ZipCode,
			&i.PhoneNumber,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listordersproducts = `-- name: Listordersproducts :many
SELECT product_id, COUNT(product_id) ,SUM(quantity) as total FROM ordersproduct
WHERE orders_id = $1
GROUP BY product_id
ORDER BY total
LIMIT $2
OFFSET $3
`

type ListordersproductsParams struct {
	OrdersID int64 `json:"orders_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

type ListordersproductsRow struct {
	ProductID int64 `json:"product_id"`
	Count     int64 `json:"count"`
	Total     int64 `json:"total"`
}

func (q *Queries) Listordersproducts(ctx context.Context, arg ListordersproductsParams) ([]ListordersproductsRow, error) {
	rows, err := q.db.QueryContext(ctx, listordersproducts, arg.OrdersID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListordersproductsRow{}
	for rows.Next() {
		var i ListordersproductsRow
		if err := rows.Scan(&i.ProductID, &i.Count, &i.Total); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
