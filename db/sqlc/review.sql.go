// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: review.sql

package db

import (
	"context"
)

const createReview = `-- name: CreateReview :one
/*-- name: DeleteReview :exec
DELETE FROM review
WHERE id = $1;*/

INSERT INTO review (
  user_id,
  product_id,
  rating
) VALUES (
  $1, $2, $3
)
RETURNING id, product_id, user_id, rating
`

type CreateReviewParams struct {
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
	Rating    int64 `json:"rating"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview, arg.UserID, arg.ProductID, arg.Rating)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Rating,
	)
	return i, err
}

const getReview = `-- name: GetReview :one
SELECT id, product_id, user_id, rating FROM review
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReview(ctx context.Context, id int64) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Rating,
	)
	return i, err
}

const listReviews = `-- name: ListReviews :many
SELECT id, product_id, user_id, rating FROM review
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReviews(ctx context.Context, arg ListReviewsParams) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.UserID,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :one
UPDATE review SET rating = $2
WHERE id = $1
RETURNING id, product_id, user_id, rating
`

type UpdateReviewParams struct {
	ID     int64 `json:"id"`
	Rating int64 `json:"rating"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, updateReview, arg.ID, arg.Rating)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Rating,
	)
	return i, err
}
